# generated by datamodel-codegen:
#   filename:  <stdin>
#   timestamp: 2025-07-24T14:38:31+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field


class PriceScheduleObject(BaseModel):
    something: Optional[str] = None


class Status(Enum):
    draft = 'draft'
    live = 'live'
    archived = 'archived'
    outdated = 'outdated'


class ItemObject(BaseModel):
    ksuid: Optional[str] = None
    name: str
    description: Optional[str] = None
    status: Optional[Status] = None
    column: Optional[float] = Field(None, description='??')
    row: Optional[float] = Field(None, description='??')
    primary_price: Optional[float] = Field(
        None, description='Primary price of the item in pennies'
    )
    secondary_price: Optional[float] = Field(
        None, description='Secondary price of the item in pennies'
    )
    tertiary_price: Optional[float] = Field(
        None, description='Tertiary price of the item in pennies'
    )
    primary_price_name: Optional[str] = Field(None, description='Name of primary price')
    secondary_price_name: Optional[str] = Field(
        None, description='Name of secondary price'
    )
    tertiary_price_name: Optional[str] = Field(
        None, description='Name of tertiary price'
    )
    pricing_schedule: Optional[PriceScheduleObject] = None


class ItemObjectPublic(BaseModel):
    ksuid: Optional[str] = None
    name: str
    description: Optional[str] = None
    status: Optional[Status] = None
    column: Optional[float] = Field(None, description='??')
    row: Optional[float] = Field(None, description='??')
    primary_price: Optional[float] = Field(
        None, description='Primary price of the item in pennies'
    )
    secondary_price: Optional[float] = Field(
        None, description='Secondary price of the item in pennies'
    )
    tertiary_price: Optional[float] = Field(
        None, description='Tertiary price of the item in pennies'
    )
    primary_price_name: Optional[str] = Field(None, description='Name of primary price')
    secondary_price_name: Optional[str] = Field(
        None, description='Name of secondary price'
    )
    tertiary_price_name: Optional[str] = Field(
        None, description='Name of tertiary price'
    )


class CreateItemRequest(BaseModel):
    items: List[ItemObject]


class UpdateItemRequest(BaseModel):
    item: ItemObject


class ItemResponse(BaseModel):
    item: Optional[ItemObject] = None


class ItemListResponse(BaseModel):
    items: Optional[List[ItemObject]] = None


class ItemResponsePublic(BaseModel):
    item: Optional[ItemObjectPublic] = None


class ItemListResponsePublic(BaseModel):
    items: Optional[List[ItemObjectPublic]] = None
