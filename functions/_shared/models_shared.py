# generated by datamodel-codegen:
#   filename:  <stdin>
#   timestamp: 2025-08-12T14:26:10+00:00

from __future__ import annotations

from enum import Enum
from typing import Optional

from pydantic import BaseModel, Field, RootModel


class ErrorResponse(BaseModel):
    message: Optional[str] = None
    error: Optional[str] = None


class CreateCustomerRequest(BaseModel):
    ksuid: Optional[str] = Field(
        None,
        description='Unique KSUID identifier for the customer.',
        examples=['1y1d8h3n0e4z5k8ab1v03q4g7'],
    )
    name: str = Field(
        ..., description='Full name of the customer.', examples=['Jane Doe']
    )
    email: Optional[str] = Field(
        None,
        description='Email address of the customer.',
        examples=['jane.doe@example.com'],
    )
    phone: Optional[str] = Field(
        None, description='Phone number for the customer.', examples=['+447700900123']
    )
    bio: Optional[str] = Field(
        None,
        description='Short description or biography for the customer.',
        examples=['Salsa dancer from Manchester.'],
    )
    version: Optional[int] = Field(
        None, description='Version number for concurrency control.', examples=[1]
    )


class Action(Enum):
    post = 'POST'


class GeneratePresignedUploadRequest(BaseModel):
    action: Action = Field(
        ...,
        description='Action type. Must be `"POST"` for file upload.',
        examples=['POST'],
    )
    field_name: str = Field(
        ...,
        alias='fieldName',
        description='(used to generate S3 key path).',
        examples=[' '],
    )
    file_type: str = Field(
        ...,
        alias='fileType',
        description='MIME type of the file being uploaded.',
        examples=['image/jpeg'],
    )
    organisation: Optional[str] = Field(
        None,
        description='Organisation slug (usually injected from path parameter, but can also be set manually).',
        examples=['mlf'],
    )


class Action1(Enum):
    get = 'GET'


class GeneratePresignedDownloadRequest(BaseModel):
    action: Action1 = Field(
        ...,
        description='Action type. Must be `"GET"` for file download.',
        examples=['GET'],
    )
    file_key: str = Field(
        ...,
        alias='fileKey',
        description='S3 key for the file to download.',
        examples=[' '],
    )
    organisation: Optional[str] = Field(
        None,
        description='Organisation slug (optional, not directly used by the GET logic).',
        examples=['mlf'],
    )


class Organisation(RootModel[str]):
    root: str


class Event(Organisation):
    pass


class Ksuid(Organisation):
    pass
