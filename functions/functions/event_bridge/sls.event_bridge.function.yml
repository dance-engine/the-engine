TriggerAnEvent:
  runtime: python3.11
  handler: functions/event_bridge/lambda_event_bridge.trigger_handler
  name: "${sls:stage}-${self:service}-trigger-eventbridge"
  package:
    patterns:
      - '!**/**'
      - "functions/event_bridge/**"
      - "shared/**"
  # environment:
  #   STAGE_NAME: ${sls:stage}
  #   PRODUCTS_TABLE_NAME: ${param:stripeProductsTableName}
  #   CREATE_TICKET_LAMBDA: "${sls:stage}-create_ticket"
  # layers:
  #   - !Ref DynamodbLambdaLayer
  layers:
    - !Ref BrevoLambdaLayer
  events:
    - httpApi:
        path: /{organisation}/trigger
        method: get
        authorizer:
          adminAuthorizer
        documentation: ${file(functions/event_bridge/sls.event_bridge.doc.yml):TriggerAnEvent.getOrg}
    - httpApi:
        path: /trigger
        method: get
        authorizer:
          adminAuthorizer
        documentation: ${file(functions/event_bridge/sls.event_bridge.doc.yml):TriggerAnEvent.get}
    - httpApi:
        path: /public/trigger
        method: get
        documentation: ${file(functions/event_bridge/sls.event_bridge.doc.yml):TriggerAnEvent.get}


#--------------------

ReceiveEvent:
  runtime: python3.11
  handler: functions/event_bridge/lambda_event_bridge.receive_handler
  name: "${sls:stage}-${self:service}-receive-eventbridge"
  package:
    patterns:
      - '!**/**'
      - "functions/event_bridge/**"
      - "shared/**"
  environment:
    BREVO_KEY: ${ssm:/danceengine/${sls:stage}/brevo/api_key}
  layers:
    - !Ref BrevoLambdaLayer
  events:
    - eventBridge:
        pattern:
          source:
            - prefix: "dance-engine."