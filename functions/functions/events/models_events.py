# generated by datamodel-codegen:
#   filename:  <stdin>
#   timestamp: 2025-04-22T02:03:12+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field


class LocationObject(BaseModel):
    ksuid: Optional[str] = None
    name: str
    address: Optional[str] = None
    lat: Optional[float] = None
    lng: Optional[float] = None


class Status(Enum):
    draft = 'draft'
    live = 'live'
    archived = 'archived'
    outdated = 'outdated'


class CategoryEnum(Enum):
    congress = 'congress'
    workshop = 'workshop'
    party = 'party'
    class_ = 'class'
    lecture = 'lecture'


class EventObject(BaseModel):
    status: Optional[Status] = 'draft'
    ksuid: Optional[str] = Field(None, description='ID of the event')
    banner: Optional[str] = Field(
        None, description='Appears at the top of the event page'
    )
    entity_type: Optional[str] = None
    name: str = Field(..., description='The name of the event.', min_length=2)
    starts_at: Optional[datetime] = None
    ends_at: Optional[datetime] = None
    category: Optional[List[CategoryEnum]] = None
    capacity: Optional[int] = None
    number_sold: Optional[int] = 0
    description: Optional[str] = None
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None
    version: Optional[int] = None
    location: Optional[LocationObject] = None
    history: Optional[List[Dict[str, Any]]] = None


class EventObjectPublic(BaseModel):
    status: Optional[Status] = 'draft'
    ksuid: Optional[str] = Field(None, description='ID of the event')
    banner: Optional[str] = Field(
        None, description='Appears at the top of the event page'
    )
    entity_type: Optional[str] = None
    name: str = Field(..., description='The name of the event.', min_length=2)
    starts_at: datetime
    ends_at: datetime
    category: Optional[List[CategoryEnum]] = None
    description: Optional[str] = None
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None
    version: Optional[int] = None
    location: Optional[LocationObject] = None


class CreateEventRequest(BaseModel):
    event: EventObject


class UpdateEventRequest(CreateEventRequest):
    pass


class EventResponse(BaseModel):
    event: Optional[EventObject] = None


class EventListResponse(BaseModel):
    events: Optional[List[EventObject]] = None


class EventResponsePublic(BaseModel):
    event: Optional[EventObjectPublic] = None


class EventListResponsePublic(BaseModel):
    events: Optional[List[EventObjectPublic]] = None
