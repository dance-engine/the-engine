{
  "openapi": "3.0.0",
  "components": {
    "schemas": {
      "LocationObject": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "ksuid": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "lat": {
            "type": "number"
          },
          "lng": {
            "type": "number"
          }
        },
        "x-internal-group": "events",
        "x-internal-path": "_pydantic/models"
      },
      "EventObject": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "draft",
              "live",
              "archived",
              "outdated"
            ],
            "default": "draft"
          },
          "ksuid": {
            "type": "string",
            "description": "ID of the event"
          },
          "banner": {
            "type": "string",
            "description": "Appears at the top of the event page"
          },
          "name": {
            "type": "string",
            "minLength": 2,
            "description": "The name of the event."
          },
          "starts_at": {
            "type": "string",
            "format": "date-time"
          },
          "ends_at": {
            "type": "string",
            "format": "date-time"
          },
          "category": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "congress",
                "workshop",
                "party",
                "class",
                "lecture"
              ]
            }
          },
          "capacity": {
            "type": "integer"
          },
          "number_sold": {
            "type": "integer",
            "default": 0
          },
          "description": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "version": {
            "type": "integer"
          },
          "location": {
            "$ref": "#/components/schemas/LocationObject"
          },
          "history": {
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "x-internal-group": "events",
        "x-internal-path": "_pydantic/models"
      },
      "EventObjectPublic": {
        "type": "object",
        "required": [
          "name",
          "starts_at",
          "ends_at"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "draft",
              "live",
              "archived",
              "outdated"
            ],
            "default": "draft"
          },
          "ksuid": {
            "type": "string",
            "description": "ID of the event"
          },
          "banner": {
            "type": "string",
            "description": "Appears at the top of the event page"
          },
          "entity_type": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "minLength": 2,
            "description": "The name of the event."
          },
          "starts_at": {
            "type": "string",
            "format": "date-time"
          },
          "ends_at": {
            "type": "string",
            "format": "date-time"
          },
          "category": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "congress",
                "workshop",
                "party",
                "class",
                "lecture"
              ]
            }
          },
          "description": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "version": {
            "type": "integer"
          },
          "location": {
            "$ref": "#/components/schemas/LocationObject"
          }
        },
        "x-internal-group": "events",
        "x-internal-path": "_pydantic/models"
      },
      "CreateEventRequest": {
        "type": "object",
        "required": [
          "event"
        ],
        "properties": {
          "event": {
            "$ref": "#/components/schemas/EventObject"
          }
        },
        "x-internal-group": "events",
        "x-internal-path": "_pydantic/models"
      },
      "UpdateEventRequest": {
        "type": "object",
        "required": [
          "event"
        ],
        "properties": {
          "event": {
            "$ref": "#/components/schemas/EventObject"
          }
        },
        "x-internal-group": "events",
        "x-internal-path": "_pydantic/models"
      },
      "EventResponse": {
        "type": "object",
        "properties": {
          "event": {
            "$ref": "#/components/schemas/EventObject"
          }
        },
        "x-internal-group": "events",
        "x-internal-path": "_pydantic/models"
      },
      "EventListResponse": {
        "type": "object",
        "properties": {
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventObject"
            }
          }
        },
        "x-internal-group": "events",
        "x-internal-path": "_pydantic/models"
      },
      "EventResponsePublic": {
        "type": "object",
        "properties": {
          "event": {
            "$ref": "#/components/schemas/EventObjectPublic"
          }
        },
        "x-internal-group": "events",
        "x-internal-path": "_pydantic/models"
      },
      "EventListResponsePublic": {
        "type": "object",
        "properties": {
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventObjectPublic"
            }
          }
        },
        "x-internal-group": "events",
        "x-internal-path": "_pydantic/models"
      },
      "OrganisationObject": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "i-am-teapot",
              "draft",
              "active",
              "setup",
              "suspended",
              "archived"
            ],
            "default": "draft"
          },
          "ksuid": {
            "type": "string",
            "description": "ID of the organisation"
          },
          "organisation": {
            "type": "string",
            "description": "Short slug used to represent the org"
          },
          "name": {
            "type": "string",
            "minLength": 2,
            "description": "The name of the organisation."
          },
          "account_id": {
            "type": "string",
            "description": "The Stripe account ID associated with the organisation"
          },
          "banner": {
            "type": "string",
            "description": "URL to the banner image for the organisation"
          },
          "logo": {
            "type": "string",
            "description": "URL to the logo image for the organisation"
          },
          "css_vars": {
            "type": "string",
            "description": "CSS variables for the organisation used to customise SOLO templates"
          },
          "description": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "version": {
            "type": "integer"
          },
          "history": {
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "x-internal-group": "organisation",
        "x-internal-path": "_pydantic/models"
      },
      "OrganisationResponse": {
        "type": "object",
        "properties": {
          "organisation": {
            "$ref": "#/components/schemas/OrganisationObject"
          }
        },
        "x-internal-group": "organisation",
        "x-internal-path": "_pydantic/models"
      },
      "UpdateOrganisationRequest": {
        "type": "object",
        "required": [
          "organisation"
        ],
        "properties": {
          "organisation": {
            "$ref": "#/components/schemas/OrganisationObject"
          }
        },
        "x-internal-group": "organisation",
        "x-internal-path": "_pydantic/models"
      },
      "OrganisationObjectPublic": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "organisation": {
            "type": "string",
            "description": "Short slug used to represent the org"
          },
          "name": {
            "type": "string",
            "minLength": 2,
            "description": "The name of the organisation."
          },
          "account_id": {
            "type": "string",
            "description": "The Stripe account ID associated with the organisation"
          },
          "banner": {
            "type": "string",
            "description": "URL to the banner image for the organisation"
          },
          "logo": {
            "type": "string",
            "description": "URL to the logo image for the organisation"
          },
          "css_vars": {
            "type": "string",
            "description": "CSS variables for the organisation used to customise SOLO templates"
          },
          "description": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "version": {
            "type": "integer"
          }
        },
        "x-internal-group": "organisation",
        "x-internal-path": "_pydantic/models"
      },
      "CreateOrganisationRequest": {
        "type": "object",
        "required": [
          "organisation"
        ],
        "properties": {
          "organisation": {
            "$ref": "#/components/schemas/OrganisationObject"
          }
        },
        "x-internal-group": "organisation",
        "x-internal-path": "_pydantic/models"
      },
      "OrganisationsListResponse": {
        "type": "object",
        "properties": {
          "organisations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganisationObject"
            }
          }
        },
        "x-internal-group": "organisation",
        "x-internal-path": "_pydantic/models"
      },
      "OrganisationsListResponsePublic": {
        "type": "object",
        "properties": {
          "organisations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganisationObjectPublic"
            }
          }
        },
        "x-internal-group": "organisation",
        "x-internal-path": "_pydantic/models"
      },
      "PriceScheduleObject": {
        "type": "object",
        "properties": {
          "something": {
            "type": "string"
          }
        },
        "x-internal-group": "items",
        "x-internal-path": "_pydantic/models"
      },
      "ItemObject": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "ksuid": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "draft",
              "live",
              "archived",
              "outdated"
            ]
          },
          "column": {
            "description": "??",
            "type": "number"
          },
          "row": {
            "description": "??",
            "type": "number"
          },
          "primary_price": {
            "description": "Primary price of the item in pennies",
            "type": "number"
          },
          "secondary_price": {
            "description": "Secondary price of the item in pennies",
            "type": "number"
          },
          "tertiary_price": {
            "description": "Tertiary price of the item in pennies",
            "type": "number"
          },
          "primary_price_name": {
            "description": "Name of primary price",
            "type": "string"
          },
          "secondary_price_name": {
            "description": "Name of secondary price",
            "type": "string"
          },
          "tertiary_price_name": {
            "description": "Name of tertiary price",
            "type": "string"
          },
          "pricing_schedule": {
            "$ref": "#/components/schemas/PriceScheduleObject"
          }
        },
        "x-internal-group": "items",
        "x-internal-path": "_pydantic/models"
      },
      "ItemObjectPublic": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "ksuid": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "draft",
              "live",
              "archived",
              "outdated"
            ]
          },
          "column": {
            "description": "??",
            "type": "number"
          },
          "row": {
            "description": "??",
            "type": "number"
          },
          "primary_price": {
            "description": "Primary price of the item in pennies",
            "type": "number"
          },
          "secondary_price": {
            "description": "Secondary price of the item in pennies",
            "type": "number"
          },
          "tertiary_price": {
            "description": "Tertiary price of the item in pennies",
            "type": "number"
          },
          "primary_price_name": {
            "description": "Name of primary price",
            "type": "string"
          },
          "secondary_price_name": {
            "description": "Name of secondary price",
            "type": "string"
          },
          "tertiary_price_name": {
            "description": "Name of tertiary price",
            "type": "string"
          }
        },
        "x-internal-group": "items",
        "x-internal-path": "_pydantic/models"
      },
      "CreateItemRequest": {
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ItemObject"
            }
          }
        },
        "x-internal-group": "items",
        "x-internal-path": "_pydantic/models"
      },
      "UpdateItemRequest": {
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ItemObject"
            }
          }
        },
        "x-internal-group": "items",
        "x-internal-path": "_pydantic/models"
      },
      "ItemResponse": {
        "type": "object",
        "properties": {
          "item": {
            "$ref": "#/components/schemas/ItemObject"
          }
        },
        "x-internal-group": "items",
        "x-internal-path": "_pydantic/models"
      },
      "ItemListResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ItemObject"
            }
          }
        },
        "x-internal-group": "items",
        "x-internal-path": "_pydantic/models"
      },
      "ItemResponsePublic": {
        "type": "object",
        "properties": {
          "item": {
            "$ref": "#/components/schemas/ItemObjectPublic"
          }
        },
        "x-internal-group": "items",
        "x-internal-path": "_pydantic/models"
      },
      "ItemListResponsePublic": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ItemObjectPublic"
            }
          }
        },
        "x-internal-group": "items",
        "x-internal-path": "_pydantic/models"
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "error": {
            "type": "string"
          }
        }
      },
      "CreateCustomerRequest": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "ksuid": {
            "type": "string",
            "description": "Unique KSUID identifier for the customer.",
            "example": "1y1d8h3n0e4z5k8ab1v03q4g7"
          },
          "name": {
            "type": "string",
            "description": "Full name of the customer.",
            "example": "Jane Doe"
          },
          "email": {
            "type": "string",
            "description": "Email address of the customer.",
            "example": "jane.doe@example.com"
          },
          "phone": {
            "type": "string",
            "description": "Phone number for the customer.",
            "example": "+447700900123"
          },
          "bio": {
            "type": "string",
            "description": "Short description or biography for the customer.",
            "example": "Salsa dancer from Manchester."
          },
          "version": {
            "type": "integer",
            "description": "Version number for concurrency control.",
            "example": 1
          }
        }
      },
      "GeneratePresignedUploadRequest": {
        "type": "object",
        "required": [
          "action",
          "fieldName",
          "fileType"
        ],
        "properties": {
          "action": {
            "type": "string",
            "enum": [
              "POST"
            ],
            "description": "Action type. Must be `\"POST\"` for file upload.",
            "example": "POST"
          },
          "fieldName": {
            "type": "string",
            "description": "(used to generate S3 key path).",
            "example": " "
          },
          "fileType": {
            "type": "string",
            "description": "MIME type of the file being uploaded.",
            "example": "image/jpeg"
          },
          "organisation": {
            "type": "string",
            "description": "Organisation slug (usually injected from path parameter, but can also be set manually).",
            "example": "mlf"
          }
        }
      },
      "GeneratePresignedDownloadRequest": {
        "type": "object",
        "required": [
          "action",
          "fileKey"
        ],
        "properties": {
          "action": {
            "type": "string",
            "enum": [
              "GET"
            ],
            "description": "Action type. Must be `\"GET\"` for file download.",
            "example": "GET"
          },
          "fileKey": {
            "type": "string",
            "description": "S3 key for the file to download.",
            "example": " "
          },
          "organisation": {
            "type": "string",
            "description": "Organisation slug (optional, not directly used by the GET logic).",
            "example": "mlf"
          }
        }
      },
      "organisation": {
        "type": "string"
      },
      "event": {
        "type": "string"
      },
      "ksuid": {
        "type": "string"
      }
    },
    "securitySchemes": {
      "clerk_jwt": {
        "description": "JWT issued by Clerk. The token must be included in the `Authorization` header as a Bearer token. Users must be part of the target organisation and have the required role (e.g., `admin`) to access protected resources.\n",
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "info": {
    "title": "Dance Engine API",
    "description": "The API for Dance Engine",
    "version": "0.0.1"
  },
  "security": [
    {
      "clerk_jwt": []
    }
  ],
  "paths": {
    "/{organisation}/{event}/items": {
      "get": {
        "summary": "Get All Items",
        "description": "Returns a list of all items for a given organisation and event.",
        "operationId": "items",
        "parameters": [
          {
            "name": "organisation",
            "in": "path",
            "description": "Organisation slug",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/organisation"
            }
          },
          {
            "name": "event",
            "in": "path",
            "description": "Event slug or ID",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/event"
            }
          }
        ],
        "tags": [
          "Items"
        ],
        "responses": {
          "200": {
            "description": "Returns a list of all items.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemListResponse"
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "No items found.",
            "headers": {}
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "headers": {}
          }
        }
      },
      "post": {
        "summary": "Create Item",
        "description": "Creates a new item and stores it for the given event.",
        "operationId": "items-8157b87b-855c-43c3-8685-0cf98fc96f9b",
        "parameters": [
          {
            "name": "organisation",
            "in": "path",
            "description": "Organisation slug",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/organisation"
            }
          },
          {
            "name": "event",
            "in": "path",
            "description": "Event slug or ID",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/event"
            }
          }
        ],
        "tags": [
          "Items"
        ],
        "requestBody": {
          "description": "Item details",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateItemRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Item created successfully.",
            "headers": {}
          },
          "207": {
            "description": "Item created successfully with some unprocessed items.",
            "headers": {}
          },
          "400": {
            "description": "Invalid input",
            "headers": {}
          },
          "409": {
            "description": "Version conflict.",
            "headers": {}
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/{organisation}/{event}/items/{ksuid}": {
      "get": {
        "summary": "Get Single Item",
        "description": "Fetch details of a specific item by its KSUID.",
        "operationId": "items-d6ba60f9-edfd-4b1d-9b1e-3d3cd0635f3d",
        "parameters": [
          {
            "name": "organisation",
            "in": "path",
            "description": "Organisation slug",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/organisation"
            }
          },
          {
            "name": "event",
            "in": "path",
            "description": "Event slug or ID",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/event"
            }
          },
          {
            "name": "ksuid",
            "in": "path",
            "description": "Unique item ID (KSUID)",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ksuid"
            }
          }
        ],
        "tags": [
          "Items"
        ],
        "responses": {
          "200": {
            "description": "The item object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemResponse"
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "Item not found",
            "headers": {}
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "headers": {}
          }
        }
      },
      "put": {
        "summary": "Update an Item",
        "description": "Update an existing item for a given event.",
        "operationId": "items-e5e90943-c3b8-4161-b5fe-5fb44fce6801",
        "parameters": [
          {
            "name": "organisation",
            "in": "path",
            "description": "Organisation slug",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/organisation"
            }
          },
          {
            "name": "event",
            "in": "path",
            "description": "Event slug or ID",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/event"
            }
          },
          {
            "name": "ksuid",
            "in": "path",
            "description": "Unique item ID (KSUID)",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ksuid"
            }
          }
        ],
        "tags": [
          "Items"
        ],
        "requestBody": {
          "description": "Item details",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateItemRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Item updated successfully.",
            "headers": {}
          },
          "400": {
            "description": "Invalid input",
            "headers": {}
          },
          "409": {
            "description": "Version conflict.",
            "headers": {}
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/public/{organisation}/{event}/items/{ksuid}": {
      "get": {
        "summary": "Public Get Item",
        "description": "Public endpoint to get a specific item by its KSUID.",
        "operationId": "items-514c66b2-62b2-4375-97aa-c81e04565bcd",
        "parameters": [
          {
            "name": "organisation",
            "in": "path",
            "description": "Organisation slug",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/organisation"
            }
          },
          {
            "name": "event",
            "in": "path",
            "description": "Event slug or ID",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/event"
            }
          },
          {
            "name": "ksuid",
            "in": "path",
            "description": "Unique item ID (KSUID)",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ksuid"
            }
          }
        ],
        "tags": [
          "Public",
          "Items"
        ],
        "security": [
          {}
        ],
        "responses": {
          "200": {
            "description": "The item object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemResponsePublic"
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "Item not found",
            "headers": {}
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/public/{organisation}/{event}/items": {
      "get": {
        "summary": "Public Get All Items",
        "description": "Public endpoint to get all items for a given organisation and event.",
        "operationId": "items-2cf2a60b-3f7e-4e91-a010-49222d89a632",
        "parameters": [
          {
            "name": "organisation",
            "in": "path",
            "description": "Organisation slug",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/organisation"
            }
          },
          {
            "name": "event",
            "in": "path",
            "description": "Event slug or ID",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/event"
            }
          }
        ],
        "tags": [
          "Public",
          "Items"
        ],
        "security": [
          {}
        ],
        "responses": {
          "200": {
            "description": "A list of items.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemListResponsePublic"
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "Items not found",
            "headers": {}
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/organisations": {
      "get": {
        "summary": "GET organisations",
        "description": "Handle GET requests for /organisations",
        "operationId": "organisations",
        "parameters": [],
        "tags": [
          "Organisations"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganisationsListResponse"
                }
              }
            },
            "headers": {}
          },
          "405": {
            "description": "Method Not Allowed",
            "headers": {}
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {}
          }
        }
      },
      "post": {
        "summary": "POST organisations",
        "description": "Handle POST requests for /organisations",
        "operationId": "organisations-3213c869-c958-432c-81d2-576cea24303c",
        "parameters": [],
        "tags": [
          "Organisations"
        ],
        "requestBody": {
          "description": "Description of the request body",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrganisationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "headers": {}
          },
          "405": {
            "description": "Method Not Allowed",
            "headers": {}
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {}
          }
        }
      }
    },
    "/public/organisations": {
      "get": {
        "summary": "Public Get Organisations",
        "description": "Public endpoint to get all organisations.",
        "operationId": "organisations-13a3e8f8-79f6-4d22-a86a-9c086ae67d37",
        "parameters": [],
        "tags": [
          "Public",
          "Organisations"
        ],
        "security": [
          {}
        ],
        "responses": {
          "200": {
            "description": "The organisation response object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganisationsListResponsePublic"
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "Event not found",
            "headers": {}
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/{organisation}/trigger": {
      "get": {
        "summary": "Trigger an event (org)",
        "description": "Trigger and event for a given organisation.",
        "operationId": "eventbridge",
        "parameters": [
          {
            "name": "organisation",
            "in": "path",
            "description": "Organisation slug",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/organisation"
            }
          }
        ],
        "tags": [
          "Event_Brdige"
        ],
        "responses": {
          "200": {
            "description": "Event Triggered.",
            "headers": {}
          },
          "400": {
            "description": "400 Not implemented.",
            "headers": {}
          },
          "500": {
            "description": "Internal server error.",
            "headers": {}
          }
        }
      }
    },
    "/trigger": {
      "get": {
        "summary": "Trigger an event",
        "description": "Trigger and event.",
        "operationId": "eventbridge-74def89c-672c-4bc9-b33d-ff38623b8b2a",
        "parameters": [],
        "tags": [
          "Event_Brdige"
        ],
        "responses": {
          "200": {
            "description": "Event Triggered.",
            "headers": {}
          },
          "400": {
            "description": "400 Not implemented.",
            "headers": {}
          },
          "500": {
            "description": "Internal server error.",
            "headers": {}
          }
        }
      }
    },
    "/{organisation}/events": {
      "get": {
        "summary": "Get All Events",
        "description": "Returns a list of all events for a given organisation.",
        "operationId": "events",
        "parameters": [
          {
            "name": "organisation",
            "in": "path",
            "description": "Organisation slug",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/organisation"
            }
          }
        ],
        "tags": [
          "Events"
        ],
        "responses": {
          "200": {
            "description": "Returns a list of all events.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventListResponse"
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "No events found.",
            "headers": {}
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "headers": {}
          }
        }
      },
      "post": {
        "summary": "Create Event",
        "description": "Creates a new event and stores its location.",
        "operationId": "events-49bb4f07-de4f-497b-9519-ee28dd4e1314",
        "parameters": [
          {
            "name": "organisation",
            "in": "path",
            "description": "Organisation slug",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/organisation"
            }
          }
        ],
        "tags": [
          "Events"
        ],
        "requestBody": {
          "description": "Event details",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEventRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Event created successfully.",
            "headers": {}
          },
          "400": {
            "description": "Invalid input",
            "headers": {}
          },
          "409": {
            "description": "Version conflict.",
            "headers": {}
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/{organisation}/events/{ksuid}": {
      "get": {
        "summary": "Get Single Event",
        "description": "Fetch details of a specific event by its KSUID.",
        "operationId": "events-fc57227f-1402-4d37-8a33-f45f733df6aa",
        "parameters": [
          {
            "name": "organisation",
            "in": "path",
            "description": "Organisation slug",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/organisation"
            }
          },
          {
            "name": "ksuid",
            "in": "path",
            "description": "Unique event ID (KSUID)",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ksuid"
            }
          }
        ],
        "tags": [
          "Events"
        ],
        "responses": {
          "200": {
            "description": "The event object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventResponse"
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "Event not found",
            "headers": {}
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "headers": {}
          }
        }
      },
      "put": {
        "summary": "Update an Event",
        "description": "Update an existing event and its location",
        "operationId": "events-f6f0a0ee-3c27-4912-8593-8a300048ae39",
        "parameters": [
          {
            "name": "organisation",
            "in": "path",
            "description": "Organisation slug",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/organisation"
            }
          },
          {
            "name": "ksuid",
            "in": "path",
            "description": "Unique event ID (KSUID)",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ksuid"
            }
          }
        ],
        "tags": [
          "Events"
        ],
        "requestBody": {
          "description": "Event details",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEventRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Event updated successfully.",
            "headers": {}
          },
          "400": {
            "description": "Invalid input",
            "headers": {}
          },
          "409": {
            "description": "Version conflict.",
            "headers": {}
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/public/{organisation}/events/{ksuid}": {
      "get": {
        "summary": "Public Get Event",
        "description": "Public endpoint to get a specific event by its KSUID.",
        "operationId": "events-457e0fbf-2ac5-4c21-ba42-9795b57e582d",
        "parameters": [
          {
            "name": "organisation",
            "in": "path",
            "description": "Organisation slug",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/organisation"
            }
          },
          {
            "name": "ksuid",
            "in": "path",
            "description": "Unique event ID (KSUID)",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ksuid"
            }
          }
        ],
        "tags": [
          "Public",
          "Events"
        ],
        "security": [
          {}
        ],
        "responses": {
          "200": {
            "description": "The event object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventResponsePublic"
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "Event not found",
            "headers": {}
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/public/{organisation}/events": {
      "get": {
        "summary": "Public Get ALL Events",
        "description": "Public endpoint to get a specific event by its KSUID.",
        "operationId": "events-d0bb577c-be7d-477f-9a2d-e31f260550f7",
        "parameters": [
          {
            "name": "organisation",
            "in": "path",
            "description": "Organisation slug",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/organisation"
            }
          }
        ],
        "tags": [
          "Public",
          "Events"
        ],
        "security": [
          {}
        ],
        "responses": {
          "200": {
            "description": "The event object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventListResponsePublic"
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "Event not found",
            "headers": {}
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/{organisation}/generate-presigned-url": {
      "post": {
        "summary": "Generate Presigned Upload URL",
        "description": "Generates a presigned POST URL to allow users to upload a file to S3 securely.",
        "operationId": "presigned_url",
        "parameters": [
          {
            "name": "organisation",
            "in": "path",
            "description": "Organisation slug",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/organisation"
            }
          }
        ],
        "tags": [
          "S3"
        ],
        "requestBody": {
          "description": "File upload details",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GeneratePresignedUploadRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Presigned POST URL and form fields returned.",
            "headers": {}
          },
          "400": {
            "description": "Invalid input or unsupported action.",
            "headers": {}
          },
          "500": {
            "description": "Internal server error.",
            "headers": {}
          }
        }
      }
    },
    "/generate-presigned-url": {
      "post": {
        "summary": "Generate Presigned Download URL",
        "description": "Generates a presigned GET URL to allow users to download a file from S3.",
        "operationId": "presigned_url-0ffcb904-0154-4c1a-89ef-1814f6b5ced4",
        "parameters": [],
        "tags": [
          "S3"
        ],
        "requestBody": {
          "description": "File download details",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GeneratePresignedDownloadRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Presigned download URL returned.",
            "headers": {}
          },
          "400": {
            "description": "Invalid input or missing file key.",
            "headers": {}
          },
          "500": {
            "description": "Internal server error.",
            "headers": {}
          }
        }
      }
    },
    "/{organisation}/customers": {
      "get": {
        "summary": "Get All Customers",
        "description": "Returns a list of all customers for a given organisation.",
        "operationId": "customers",
        "parameters": [
          {
            "name": "organisation",
            "in": "path",
            "description": "Organisation slug",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/organisation"
            }
          }
        ],
        "tags": [
          "Customers"
        ],
        "responses": {
          "200": {
            "description": "Returns a list of all customers.",
            "headers": {}
          },
          "404": {
            "description": "No customers found.",
            "headers": {}
          },
          "500": {
            "description": "Internal server error.",
            "headers": {}
          }
        }
      },
      "post": {
        "summary": "Create Customer",
        "description": "Creates a new customer record under a specific organisation.",
        "operationId": "customers-6b6d3318-94e8-4c81-b5a1-d1fa2a80df15",
        "parameters": [
          {
            "name": "organisation",
            "in": "path",
            "description": "Organisation slug",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/organisation"
            }
          }
        ],
        "tags": [
          "Customers"
        ],
        "requestBody": {
          "description": "Customer details",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCustomerRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Customer created successfully.",
            "headers": {}
          },
          "400": {
            "description": "Invalid input or duplicate entry.",
            "headers": {}
          },
          "500": {
            "description": "Internal server error.",
            "headers": {}
          }
        }
      }
    },
    "/{organisation}/customers/{ksuid}": {
      "get": {
        "summary": "Get Single Customer",
        "description": "Fetch details of a specific customer by their KSUID in a given organisation.",
        "operationId": "customers-cd01041a-a3c0-42d9-9342-66becd543429",
        "parameters": [
          {
            "name": "organisation",
            "in": "path",
            "description": "Organisation slug",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/organisation"
            }
          },
          {
            "name": "ksuid",
            "in": "path",
            "description": "Unique customer ID (KSUID)",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ksuid"
            }
          }
        ],
        "tags": [
          "Customers"
        ],
        "responses": {
          "200": {
            "description": "The customer object.",
            "headers": {}
          },
          "404": {
            "description": "Customer not found",
            "headers": {}
          },
          "500": {
            "description": "Internal server error.",
            "headers": {}
          }
        }
      }
    },
    "/{organisation}/settings": {
      "get": {
        "summary": "Get Org Settings",
        "description": "Returns the settings for a given organisation.",
        "operationId": "organisation",
        "parameters": [
          {
            "name": "organisation",
            "in": "path",
            "description": "Organisation slug",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/organisation"
            }
          }
        ],
        "tags": [
          "Organisation"
        ],
        "responses": {
          "200": {
            "description": "Returns organisation details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganisationResponse"
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "No events found.",
            "headers": {}
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "headers": {}
          }
        }
      },
      "put": {
        "summary": "Update Organisatioon Settings",
        "description": "Fetch details of a specific organisation by its slug.",
        "operationId": "organisation-f5c81242-d823-4244-8acd-280d8d8f96df",
        "parameters": [
          {
            "name": "organisation",
            "in": "path",
            "description": "Organisation slug",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/organisation"
            }
          }
        ],
        "tags": [
          "Organisation"
        ],
        "requestBody": {
          "description": "Organisation details",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrganisationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The organisation object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganisationResponse"
                }
              }
            },
            "headers": {}
          },
          "400": {
            "description": "Invalid input",
            "headers": {}
          },
          "409": {
            "description": "Version conflict.",
            "headers": {}
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            },
            "headers": {}
          }
        }
      }
    }
  }
}