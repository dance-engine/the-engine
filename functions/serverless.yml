# Base serverless.yml
org: danceenginesystems
app: dance-engine
service: core

plugins:
  - serverless-prune-plugin
  - serverless-openapi-documenter
  - serverless-s3-sync # USed to move the aws cloudformation template we use to build customer resources

custom:
  documentation: ${file(serverless.doc.yml):documentation}
  prune:
    automatic: true
    includeLayers: true
    number: 10
  config_bucket: "${sls:stage}-danceengine-config"
  upload_bucket: "${sls:stage}-danceengine-uploads"
  dynamodb_table_format: "${sls:stage}-org-org_name"
  core_table_name: "${sls:stage}-core-danceengine"
  s3Sync:
    - bucketName: ${self:custom.config_bucket}
      localDir: ../aws/s3/
      acl: private
      dependsOn: ConfigBucket

package:
  individually: true

#######################
# Stages
#######################
stages:
  default:
    observability: false
    params:
      # eventTableName: "${sls:stage}-MLF24"
      # attendeesTableName: "${sls:stage}-mlf-attendees"
      # stripeProductsTableName: "${sls:stage}-mlf-stripe-products"
      isProd: false
      deletionPolicy: Delete 
      skipTables: true
      githubBranchDestination: "develop"
      cdn_url: 'https://d232d73chhwq10.cloudfront.net'
  prod:
    params:
      isProd: true
      deletionPolicy: Retain
      githubBranchDestination: "main"
      cdn_url: 'https://d3khkjlsqdjkui.cloudfront.net'

#######################
# Provider Information
#######################
provider:
  name: aws
  runtime: nodejs20.x # Needed to enable serverless to run on github actions
  memorySize: 128 # I think this might be overkill
  region: eu-west-1
  stage: ${opt:stage, env:stage, 'preview'}

  tags:
    DanceEngineVersion: v2

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:DescribeStream
            - dynamodb:GetRecords
            - dynamodb:GetShardIterator
            - dynamodb:ListStreams
            - dynamodb:BatchGetItem
          Resource:
            - Fn::GetAtt: [CoreDanceEngineTable, Arn]
            - { "Fn::Join": [ "/", [ 
                { "Fn::GetAtt": ["CoreDanceEngineTable", "Arn" ] }, "*" 
              ]]}
            - "arn:aws:dynamodb:eu-west-1:*:table/${sls:stage}-org-*"
            - "arn:aws:dynamodb:eu-west-1:*:table/${sls:stage}-org-*/*"
        #     - Fn::GetAtt: [StripeProductsTable, Arn]
        #     - Fn::GetAtt: [MLF24Table, Arn]
        #     - { "Fn::Join": [ "/", [ 
        #         { "Fn::GetAtt": ["AttendeesTable", "Arn" ] }, "index", "ticket_number-index" 
        #       ]]}
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:GetObject
            - s3:DeleteObject
            - s3:ListBucket
          Resource: 
            - "arn:aws:s3:::${self:custom.upload_bucket}"
            - "arn:aws:s3:::${self:custom.upload_bucket}/*"
            - "arn:aws:s3:::${self:custom.config_bucket}"
            - "arn:aws:s3:::${self:custom.config_bucket}/*"
        - Effect: Allow
          Action:
            - lambda:InvokeFunction
          Resource:
            - '*'
        - Effect: Allow
          Action:
            - events:PutEvents
          Resource:
            - arn:aws:events:eu-west-1:717279731911:event-bus/default

  httpApi:
    cors: true
    authorizers:
      adminAuthorizer:
        type: request
        functionName: AuthorizerFunc

#######################
# Resources
#######################
resources:
  Description: Resources for ${self:service} (${sls:stage})
  Resources:
    S3UploadBucket: ${file(serverless.resource.yaml):resources.Resources.S3UploadBucket}
    CdnOAC: ${file(serverless.resource.yaml):resources.Resources.CdnOAC}
    CdnDistribution: ${file(serverless.resource.yaml):resources.Resources.CdnDistribution}
    BucketPolicy: ${file(serverless.resource.yaml):resources.Resources.BucketPolicy}
    ConfigBucket: ${file(serverless.resource.yaml):resources.Resources.ConfigBucket}
    DeployOrgRole: ${file(serverless.privileged.yaml):resources.Resources.DeployOrgRole}
    CoreDanceEngineTable: ${file(serverless.resource.yaml):resources.Resources.CoreDanceEngineTable}
                
#######################
# Layers
#######################

layers:
  auth:
    path: _layers/auth
  utils:
    path: _layers/utils
  pydantic:
    path: _layers/pydantic

###########################
# Resources e.g. DynamoDB
###########################    


#######################
# Functions
#######################

functions:
  HistoryTracker: ${file(functions/utils/history_tracker/sls.history_tracker.function.yml):HistoryTracker}
  AuthorizerFunc: ${file(functions/authorizer/sls.authorizer.function.yml):AuthorizerFunc}

#--------------------

  TriggerAnEvent: ${file(functions/event_bridge/sls.event_bridge.function.yml):TriggerAnEvent}
  ReceiveEvent: ${file(functions/event_bridge/sls.event_bridge.function.yml):ReceiveEvent}

#--------------------

  Events: ${file(functions/events/sls.events.function.yml):Events}

#-------------------- AWS s3

  GeneratePresignedURL: ${file(functions/utils/s3/generate_presigned/sls.generate_presigned.function.yml):GeneratePresignedURL}
  UploadProcessor: ${file(functions/utils/s3/upload_processor/sls.upload_processor.function.yml):UploadProcessor}

#---------------------- Customers

  Customers: ${file(functions/customers/sls.customers.function.yml):Customers}

#---------------------- Org and provisoning

  CreateOrgStack: ${file(privileged/organisations/sls.organisations.function.yml):CreateOrgStack}
  StackProvisioned: ${file(privileged/organisations/sls.organisations.function.yml):StackProvisioned}

  # I think this should be seperated in code into a public/organisation level function
  PublicOrganisations: ${file(privileged/organisations/sls.organisations.function.yml):PublicOrganisations} 
  Organisation: ${file(functions/organisation/sls.organisation.function.yml):Organisation}