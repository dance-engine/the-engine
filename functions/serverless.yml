# Base serverless.yml
org: danceenginesystems
app: dance-engine
service: core

plugins:
  - serverless-prune-plugin
  - serverless-openapi-documenter
  - serverless-s3-sync # USed to move the aws cloudformation template we use to build customer resources

custom:
  documentation: ${file(serverless.doc.yml):documentation}
  prune:
    automatic: true
    includeLayers: true
    number: 10
  config_bucket: "${sls:stage}-danceengine-config"
  upload_bucket: "${sls:stage}-danceengine-uploads"
  dynamodb_table_format: "${sls:stage}-org_name-events"
  s3Sync:
    - bucketName: ${self:custom.config_bucket}
      localDir: ../aws/s3/
      acl: private
      dependsOn: ConfigBucket

package:
  individually: true

#######################
# Stages
#######################
stages:
  default:
    observability: false
    params:
      # eventTableName: "${sls:stage}-MLF24"
      # attendeesTableName: "${sls:stage}-mlf-attendees"
      # stripeProductsTableName: "${sls:stage}-mlf-stripe-products"
      isProd: false
      deletionPolicy: Delete 
      skipTables: true
      githubBranchDestination: "develop"
  prod:
    params:
      isProd: true
      deletionPolicy: Retain
      githubBranchDestination: "main"

#######################
# Provider Information
#######################
provider:
  name: aws
  runtime: nodejs20.x # Needed to enable serverless to run on github actions
  memorySize: 128 # I think this might be overkill
  region: eu-west-1
  stage: ${opt:stage, env:stage, 'preview'}
  iam:
    role:
      statements:
        # - Effect: Allow
        #   Action:
        #     - dynamodb:Query
        #     - dynamodb:Scan
        #     - dynamodb:GetItem
        #     - dynamodb:PutItem
        #     - dynamodb:UpdateItem
        #     - dynamodb:DeleteItem
        #     - dynamodb:DescribeStream
        #     - dynamodb:GetRecords
        #     - dynamodb:GetShardIterator
        #     - dynamodb:ListStreams
        #     - dynamodb:BatchGetItem
        #   Resource:
        #     - Fn::GetAtt: [AttendeesTable, Arn]
        #     - Fn::GetAtt: [StripeProductsTable, Arn]
        #     - Fn::GetAtt: [MLF24Table, Arn]
        #     - { "Fn::Join": [ "/", [ 
        #         { "Fn::GetAtt": ["AttendeesTable", "Arn" ] }, "index", "ticket_number-index" 
        #       ]]}
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:GetObject
            - s3:ListBucket
          Resource: 
            - "arn:aws:s3:::${self:custom.upload_bucket}"
            - "arn:aws:s3:::${self:custom.upload_bucket}/*"
            - "arn:aws:s3:::${self:custom.config_bucket}"
            - "arn:aws:s3:::${self:custom.config_bucket}/*"
        - Effect: Allow
          Action:
            - lambda:InvokeFunction
          Resource:
            - '*'
        - Effect: Allow
          Action:
            - events:PutEvents
          Resource:
            - arn:aws:events:eu-west-1:717279731911:event-bus/default

  httpApi:
    cors: true
    authorizers:
      adminAuthorizer:
        type: request
        functionName: authorizerFunc

#######################
# Resources
#######################
resources:
  Description: Resources for ${self:service} (${sls:stage})
  Resources:
    S3UploadBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: "${self:custom.upload_bucket}"
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - "*" # Replace with "https://*.dance-engine.co.uk" for security in prod if we can do wildcards
              AllowedMethods:
                - GET
                - POST
                - PUT
                - HEAD
              AllowedHeaders:
                - "*"
              ExposedHeaders:
                - ETag
              MaxAge: 3000
    ConfigBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.config_bucket}
    DeployOrgRole: ${file(serverless.privileged.yaml):resources.Resources.DeployOrgRole}
    
                
#######################
# Layers
#######################

layers:
  auth:
    path: _layers/auth
  utils:
    path: _layers/utils
  pydantic:
    path: _layers/pydantic

###########################
# Resources e.g. DynamoDB
###########################    


#######################
# Functions
#######################

functions:

  authorizerFunc:
    runtime: python3.11
    handler: authorizer/lambda_functions.auth_handler
    layers:
      - !Ref AuthLambdaLayer
    environment:
      CLERK_KEY: ${ssm:/danceengine/${sls:stage}/clerk/public_key}
    package:
      patterns:
        - '!**/**'
        - "authorizer/**"

#--------------------

  TriggerAnEvent:
    runtime: python3.11
    handler: event_bridge/lambda_functions.trigger_handler
    name: "${sls:stage}-trigger-event"
    package:
      patterns:
        - '!**/**'
        - "event_bridge/**"
        - "shared/**"
    # environment:
    #   STAGE_NAME: ${sls:stage}
    #   PRODUCTS_TABLE_NAME: ${param:stripeProductsTableName}
    #   CREATE_TICKET_LAMBDA: "${sls:stage}-create_ticket"
    # layers:
    #   - !Ref DynamodbLambdaLayer
    events:
      - httpApi:
          path: /{organisation}/trigger
          method: get
          authorizer:
            adminAuthorizer
      - httpApi:
          path: /trigger
          method: get
          authorizer:
            adminAuthorizer

#--------------------

  ReceiveEvent:
    runtime: python3.11
    handler: event_bridge/lambda_functions.receive_handler
    name: "${sls:stage}-receive-event"
    events:
      - eventBridge:
          pattern:
            source:
              - some.pattern

#--------------------

  Events:
    runtime: python3.11
    handler: events/lambda_events.handler_create
    name: "${sls:stage}-${self:service}-events"
    package:
      patterns:
        - '!**/**'
        - "events/**"
        - "_shared/**"
    environment:
      EVENT_BASE_TABLE_NAME: ${self:custom.dynamodb_table_format}
    layers:
      - !Ref UtilsLambdaLayer
    events:
      - httpApi:
          path: /{organisation}/events
          method: get
          authorizer:
            adminAuthorizer
          documentation: ${file(serverless.doc.yml):endpoints.Events} 

#--------------------

  GeneratePresignedURL:
    runtime: python3.11
    handler: utils/s3.generate_presigned_url
    name: "${sls:stage}-${self:service}-presigned_url"
    package:
      patterns:
        - '!**/**'
        - "utils/**"
        - "_shared/**"
    environment:
      BUCKET_NAME: ${self:custom.upload_bucket}
    events:
      - httpApi:
          path: /{organisation}/generate-presigned-url
          method: post
          authorizer:
            adminAuthorizer
      - httpApi:
          path: /generate-presigned-url
          method: post
          authorizer:
            adminAuthorizer

  CreateOrgStack: ${file(serverless.privileged.yaml):functions.CreateOrgStack}